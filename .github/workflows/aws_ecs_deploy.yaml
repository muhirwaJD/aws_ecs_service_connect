# ****************************************************************************************************** #
# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created.
#
# Uses whoan/docker-build-with-cache-action to cache the Docker image to
# speed up build times. Does so by creating a second AWS ECR repo with
# [-stage] at the end to pull cached images from.
#
# Must define the env vars at the top of the file with your specific ones.
#
# Must specify the following GitHub secrets:
#   * AWS_ACCESS_KEY_ID
#   * AWS_SECRET_ACCESS_KEY
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.
# ****************************************************************************************************** #

on:
  push:
    branches: [ main ]
  # pull_request:
  #   branches: [ main ]

name: AWS ECS Deploy

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      # shared between all services
      AWS_ECR_REPOSITORY_NAME: service-connect-demo-ecr
      AWS_ECS_CLUSTER_NAME_1: service-connect-demo-cluster-1
      AWS_ECS_CLUSTER_NAME_2: service-connect-demo-cluster-2
      AWS_ECS_SERVICE_NAME_1: service-connect-demo-service-1
      AWS_ECS_SERVICE_NAME_2: service-connect-demo-service-2
      AWS_ECS_SERVICE_NAME_3: service-connect-demo-service-3
      # shared between all services - not used in
      AWS_ECS_TASK_DEFINITION_1: service-connect-demo-task-def-1
      AWS_ECS_TASK_DEFINITION_2: service-connect-demo-task-def-2
      AWS_ECS_TASK_DEFINITION_3: service-connect-demo-task-def-3

      AWS_ECS_TASK_DEFINITION_CONTAINER_NAME_1: flask-app-1
      AWS_ECS_TASK_DEFINITION_CONTAINER_NAME_2: flask-app-2
      AWS_ECS_TASK_DEFINITION_CONTAINER_NAME_3: flask-app-3

      AWS_DEFAULT_REGION: eu-west-1
      IMAGE_TAG: ${{ github.sha }}
      # IMAGE_TAG: latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@main
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@main

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      id: build-deploy-image
      uses: whoan/docker-build-with-cache-action@master
      with:
        username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        registry: ${{ steps.login-ecr.outputs.registry }}
        image_name: ${{ env.AWS_ECR_REPOSITORY_NAME }}
        image_tag: ${{ env.IMAGE_TAG }}
        push_image_and_stages: true

    - name: Fill in the new image ID in the Amazon ECS task definition 1
      id: task-def-1
      uses: aws-actions/amazon-ecs-render-task-definition@master
      with:
        task-definition: service-connect-demo-task-def-1.json
        container-name: ${{ env.AWS_ECS_TASK_DEFINITION_CONTAINER_NAME_1 }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}

    - name: Fill in the new image ID in the Amazon ECS task definition 2
      id: task-def-2
      uses: aws-actions/amazon-ecs-render-task-definition@master
      with:
        task-definition: service-connect-demo-task-def-2.json
        container-name: ${{ env.AWS_ECS_TASK_DEFINITION_CONTAINER_NAME_2 }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}

    - name: Fill in the new image ID in the Amazon ECS task definition 3
      id: task-def-3
      uses: aws-actions/amazon-ecs-render-task-definition@master
      with:
        task-definition: service-connect-demo-task-def-3.json
        container-name: ${{ env.AWS_ECS_TASK_DEFINITION_CONTAINER_NAME_3 }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}

    # set `target_group` `deregistration_delay` parameter to lower value, otherwise long time to deploy
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/edit-target-group-attributes.html#deregistration-delay
    - name: Deploy Amazon ECS task definition 1 to ECS service 1 in ECS cluster 1
      id: ecs-service-1
      uses: aws-actions/amazon-ecs-deploy-task-definition@master
      with:
        task-definition: ${{ steps.task-def-1.outputs.task-definition }}
        service: ${{ env.AWS_ECS_CLUSTER_NAME_1 }}/${{ env.AWS_ECS_SERVICE_NAME_1 }}
        cluster: ${{ env.AWS_ECS_CLUSTER_NAME_1 }}
        wait-for-service-stability: false  # whether to wait for ECS service to reach stable state after deploying

    # set `target_group` `deregistration_delay` parameter to lower value, otherwise long time to deploy
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/edit-target-group-attributes.html#deregistration-delay
    - name: Deploy Amazon ECS task definition 2 to ECS service 2 in ECS cluster 1
      id: ecs-service-2
      uses: aws-actions/amazon-ecs-deploy-task-definition@master
      with:
        task-definition: ${{ steps.task-def-2.outputs.task-definition }}
        service: ${{ env.AWS_ECS_CLUSTER_NAME_1 }}/${{ env.AWS_ECS_SERVICE_NAME_2 }}
        cluster: ${{ env.AWS_ECS_CLUSTER_NAME_1 }}
        wait-for-service-stability: false  # whether to wait for ECS service to reach stable state after deploying

    # set `target_group` `deregistration_delay` parameter to lower value, otherwise long time to deploy
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/edit-target-group-attributes.html#deregistration-delay
    - name: Deploy Amazon ECS task definition 3 to ECS service 3 in ECS cluster 2
      id: ecs-service-3
      uses: aws-actions/amazon-ecs-deploy-task-definition@master
      with:
        task-definition: ${{ steps.task-def-3.outputs.task-definition }}
        service: ${{ env.AWS_ECS_CLUSTER_NAME_2 }}/${{ env.AWS_ECS_SERVICE_NAME_3 }}
        cluster: ${{ env.AWS_ECS_CLUSTER_NAME_2 }}
        wait-for-service-stability: false  # whether to wait for ECS service to reach stable state after deploying